name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  pull_request_target:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}    

jobs:

  # build_test:
  #   permissions:
  #     checks: write
  #     pull-requests: write
  #     contents: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Build unit test image
  #       id: build-and-push
  #       uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
  #       with:
  #         context: "{{defaultContext}}"
  #         push: false
  #         target: test
  #         tags: devops-test-cov:latest
  #         # cache-from: type=gha
  #         # cache-to: type=gha,mode=max

  #     - uses: actions/checkout@v4 #fix empty github.workspace     

  #     - name: test
  #       working-directory: ${{ github.workspace }}
  #       run: |
  #         docker run -v ${PWD}/coverage:/app/coverage  devops-test-cov:latest
  #         echo ${{ secrets.USERPWD }} | sudo chown runner:docker coverage coverage/*
      
  #     - name: Archive code coverage results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: code-coverage-report
  #         path: ${{ github.workspace }}/coverage

  #     - uses: ArtiomTr/jest-coverage-report-action@v2
      
  #       with:
  #         skip-step: all
  #         coverage-file: ${{ github.workspace }}/coverage/report.json
  #         base-coverage-file: ${{ github.workspace }}/coverage/report.json
          
          

          
        

      
  # build:
  #   needs: build_test
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}

  #   # Extract metadata (tags, labels) for Docker
  #   # https://github.com/docker/metadata-action
  #   - name: Extract Docker metadata
  #     id: meta
  #     uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}    

  #   - name: Build and push Docker image
  #     id: build-and-push
  #     uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
  #     with:
  #       context: "{{defaultContext}}"
  #       push: ${{ github.event_name != 'pull_request' }}
  #       target: production
  #       tags: macabrabits/devops-test:${{github.run_number}}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       # cache-from: type=gha
  #       # cache-to: type=gha,mode=max

  release:
    # needs: build_test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    # - uses: actions/download-artifact@v4
    #   with:
    #     name: code-coverage-report
    #     path: coverage
    - name: Gzip reports
      working-directory: ${{ github.workspace }}
      run: |
        ls -la
        echo ${{ github.ref }}
        echo ${{ secrets.GITHUB_TOKEN }}
        tar -zcvf release.tar.gz src
        
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: release.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: |
    #       Changes in this Release
    #       - First Change
    #       - Second Change
    #     draft: false
    #     prerelease: false    
              
